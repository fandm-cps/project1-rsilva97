        -:    0:Source:ReallyLongInt_TEST.cpp
        -:    0:Graph:ReallyLongInt_TEST.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#define CATCH_CONFIG_MAIN
        -:    2:#include "catch.hpp"
        -:    3:#include "ReallyLongInt.hpp"
        -:    4:
function _ZL29____C_A_T_C_H____T_E_S_T____0v called 0 returned 0% blocks executed 0%
    #####:    5:TEST_CASE("Testing ReallyLongInt Class"){
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
call    5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
call   10 never executed
call   11 never executed
        -:    6:
        -:    7:    ReallyLongInt *test_rli;
        -:    8:    ReallyLongInt *test_rliNeg;
        -:    9:    ReallyLongInt *test_rliPos;
        -:   10:    ReallyLongInt *test_otherNeg;
        -:   11:    ReallyLongInt *test_otherPos;
        -:   12:
    #####:   13:    SECTION("Default Constructor"){
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
call   18 never executed
call   19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
        -:   14:
    #####:   15:        test_rli = new ReallyLongInt();
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:   16:        test_otherNeg = new ReallyLongInt(-10);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
    #####:   17:        test_otherPos = new ReallyLongInt(5);
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
        -:   18:
    #####:   19:        REQUIRE(test_rli->toString() == "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
    #####:   20:        REQUIRE_FALSE(test_rli->toString() != "0"); 
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
        -:   21:
    #####:   22:        REQUIRE(test_rli->toStringBinary() == "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
branch 31 never executed
branch 32 never executed
call   33 never executed
branch 34 never executed
branch 35 never executed
call   36 never executed
call   37 never executed
call   38 never executed
    #####:   23:        REQUIRE_FALSE(test_rli->toStringBinary() != "0");
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
call   23 never executed
branch 24 never executed
branch 25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
call   30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
branch 35 never executed
branch 36 never executed
call   37 never executed
call   38 never executed
call   39 never executed
        -:   24:
    #####:   25:        REQUIRE(test_rli->equal(*test_otherNeg) == false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    #####:   26:        REQUIRE_FALSE(test_rli->equal(*test_otherNeg) != false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
        -:   27:
    #####:   28:        REQUIRE(test_rli->equal(*test_rli) == true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    #####:   29:        REQUIRE_FALSE(test_rli->equal(*test_rli) != true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
        -:   30:        
    #####:   31:        REQUIRE(test_rli->greater(*test_otherPos) == false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    #####:   32:        REQUIRE_FALSE(test_rli->greater(*test_otherPos) != false);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
call   37 never executed
        -:   33:        
    #####:   34:        REQUIRE(test_rli->greater(*test_otherNeg) == true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
call    7 never executed
call    8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
branch 12 never executed
branch 13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
call   17 never executed
branch 18 never executed
branch 19 never executed
call   20 never executed
call   21 never executed
branch 22 never executed
branch 23 never executed
call   24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
branch 29 never executed
branch 30 never executed
call   31 never executed
branch 32 never executed
branch 33 never executed
call   34 never executed
call   35 never executed
call   36 never executed
    #####:   35:        REQUIRE_FALSE(test_rli->greater(*test_otherNeg) != true);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
call    9 never executed
branch 10 never executed
branch 11 never executed
call   12 never executed
branch 13 never executed
branch 14 never executed
call   15 never executed
branch 16 never executed
branch 17 never executed
call   18 never executed
branch 19 never executed
branch 20 never executed
call   21 never executed
call   22 never executed
branch 23 never executed
branch 24 never executed
call   25 never executed
call   26 never executed
call   27 never executed
call   28 never executed
call   29 never executed
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
call   36 never executed
        -:   36:
        -:   37:        //delete test_rli;
        -:   38:        //delete test_otherNeg;
        -:   39:        //delete test_otherPos;
        -:   40:    }
        -:   41:/*
        -:   42:    SECTION("long long num Constructor"){
        -:   43:
        -:   44:        test_rliNeg = new ReallyLongInt(-5);
        -:   45:        test_rliPos = new ReallyLongInt(5);
        -:   46:        test_otherNeg = new ReallyLongInt(-10);
        -:   47:        test_otherPos = new ReallyLongInt(24);
        -:   48:
        -:   49:        REQUIRE(test_rliNeg->toString() == "-5");
        -:   50:        REQUIRE_FALSE(test_rliNeg->toString() != "-5"); 
        -:   51:
        -:   52:        REQUIRE(test_rliPos->toString() == "5");
        -:   53:        REQUIRE_FALSE(test_rliPos->toString() != "5");
        -:   54:
        -:   55:        REQUIRE(test_rliPos->toStringBinary() == "101");
        -:   56:        REQUIRE_FALSE(test_rliPos->toStringBinary() != "101");
        -:   57:
        -:   58:        REQUIRE(test_otherNeg->toStringBinary() == "-1010");
        -:   59:        REQUIRE_FALSE(test_otherNeg->toStringBinary() != "-1010");
        -:   60:
        -:   61:        REQUIRE(test_rliNeg->equal(*test_rliPos) == false);
        -:   62:        REQUIRE_FALSE(test_rliNeg->equal(*test_rliPos) != false);
        -:   63:
        -:   64:        REQUIRE(test_rliPos->equal(*test_rliPos) == true);
        -:   65:        REQUIRE_FALSE(test_rliPos->equal(*test_rliPos) != true);
        -:   66:        
        -:   67:        REQUIRE(test_rliNeg->greater(*test_otherNeg) == true);
        -:   68:        REQUIRE_FALSE(test_rliNeg->greater(*test_otherNeg) != true);
        -:   69:        
        -:   70:        REQUIRE(test_rliPos->greater(*test_otherNeg) == true);
        -:   71:        REQUIRE_FALSE(test_rliPos->greater(*test_otherNeg) != true);
        -:   72:
        -:   73:        //delete test_rliNeg;
        -:   74:        //delete test_rliPos;
        -:   75:        //delete test_otherNeg;
        -:   76:        //delete test_otherPos;
        -:   77:        
        -:   78:    }
        -:   79:
        -:   80:    SECTION("const string& numStr Constructor"){
        -:   81:
        -:   82:        test_rliNeg = new ReallyLongInt("-6");
        -:   83:        test_rliPos = new ReallyLongInt("6");
        -:   84:        test_otherNeg = new ReallyLongInt("-15");
        -:   85:        test_otherPos = new ReallyLongInt("23");
        -:   86:
        -:   87:        REQUIRE(test_rliNeg->toString() == "-6");
        -:   88:        REQUIRE_FALSE(test_rliNeg->toString() != "-6");
        -:   89:        
        -:   90:        REQUIRE(test_rliPos->toString() == "6");
        -:   91:        REQUIRE_FALSE(test_rliPos->toString() != "6");
        -:   92:
        -:   93:        REQUIRE(test_rliNeg->toStringBinary() == "-110");
        -:   94:        REQUIRE_FALSE(test_rliNeg->toStringBinary() != "-110");
        -:   95:        
        -:   96:        REQUIRE(test_rliPos->toStringBinary() == "110");
        -:   97:        REQUIRE_FALSE(test_rliNeg->toStringBinary() != "110");
        -:   98:
        -:   99:        REQUIRE(test_rliNeg->equal(*test_rliPos) == false);
        -:  100:        REQUIRE_FALSE(test_rliNeg->equal(*test_rliPos) != false);
        -:  101:
        -:  102:        REQUIRE(test_rliPos->equal(*test_rliPos) == true);
        -:  103:        REQUIRE_FALSE(test_rliPos->equal(*test_rliPos) != true);
        -:  104:        
        -:  105:        REQUIRE(test_rliPos->greater(*test_rliNeg) == true);
        -:  106:        REQUIRE_FALSE(test_rliPos->greater(*test_rliNeg) != true);
        -:  107:
        -:  108:        REQUIRE(test_rliPos->greater(*test_otherPos) == false);
        -:  109:        REQUIRE_FALSE(test_rliPos->greater(*test_otherPos) != false);
        -:  110:        
        -:  111:        REQUIRE(test_rliNeg->greater(*test_otherNeg) == true);
        -:  112:        REQUIRE_FALSE(test_rliNeg->greater(*test_otherNeg) != true);
        -:  113:
        -:  114:        //delete test_rliNeg;
        -:  115:        //delete test_rliPos;
        -:  116:        //delete test_otherNeg;
        -:  117:        //delete test_otherPos;
        -:  118:    }
        -:  119:    
        -:  120:    SECTION("Copy Constructor"){
        -:  121:
        -:  122:        test_rli = new ReallyLongInt();
        -:  123:        test_rliNeg = new ReallyLongInt(-9);
        -:  124:        test_rliPos = new ReallyLongInt("8");
        -:  125:        test_otherNeg = new ReallyLongInt(*test_rliNeg);
        -:  126:        test_otherPos = new ReallyLongInt(*test_rliPos);
        -:  127:
        -:  128:        REQUIRE(test_otherNeg->toString() == "-9");
        -:  129:        REQUIRE_FALSE(test_otherNeg->toString() != "-9");
        -:  130:
        -:  131:        REQUIRE(test_otherPos->toString() == "8");
        -:  132:        REQUIRE_FALSE(test_otherPos->toString() != "8");
        -:  133:        
        -:  134:        REQUIRE(test_otherPos->toStringBinary() == "1000");
        -:  135:        REQUIRE_FALSE(test_otherPos->toStringBinary() != "1000");
        -:  136:
        -:  137:        REQUIRE(test_otherNeg->toStringBinary() == "-1001");
        -:  138:        REQUIRE_FALSE(test_otherNeg->toStringBinary() != "-1001");
        -:  139:
        -:  140:        REQUIRE(test_otherPos->equal(*test_rliPos) == true);
        -:  141:        REQUIRE_FALSE(test_otherPos->equal(*test_rliPos) != true);
        -:  142:
        -:  143:        REQUIRE(test_otherNeg->equal(*test_rliNeg) == true);
        -:  144:        REQUIRE_FALSE(test_otherNeg->equal(*test_rliNeg) != true);
        -:  145:
        -:  146:        REQUIRE(test_otherNeg->greater(*test_rli) == false);
        -:  147:        REQUIRE_FALSE(test_otherNeg->greater(*test_rli) != false);
        -:  148:
        -:  149:        REQUIRE(test_otherPos->greater(*test_rliPos) == false);
        -:  150:        REQUIRE_FALSE(test_otherPos->greater(*test_rliPos) != false);
        -:  151:
        -:  152:        REQUIRE(test_otherPos->greater(*test_otherNeg) == true);
        -:  153:        REQUIRE_FALSE(test_otherPos->greater(*test_otherNeg) != true);
        -:  154:        
        -:  155:        //delete test_rli;
        -:  156:        //delete test_rliNeg;
        -:  157:        //delete test_rliPos;
        -:  158:        //delete test_otherNeg;
        -:  159:        //delete test_otherPos;
        -:  160:    }*/
function _GLOBAL__sub_I__ZN5Catch6Detail6ApproxC2Ed called 0 returned 0% blocks executed 0%
function _Z41__static_initialization_and_destruction_0ii called 0 returned 0% blocks executed 0%
    #####:  161:}
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
